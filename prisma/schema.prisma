// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      userRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive userStatus @default(ACTIVE)

  FoundItem FoundItem[] // npx prisma format
  LostItem  LostItem[] // npx prisma format
  Claim     Claim[]
  Profile   Profile?

  @@map("users")
}

enum userStatus {
  ACTIVE 
  DEACTIVE
}



model FoundItem {
  id              String  @id @default(uuid())
  userId          String
  // categoryId    String
  category        String
  name            String
  description     String
  DateAndlocation String?
  phone           String?
  image           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User    @relation(fields: [userId], references: [id])
  // category ItemCategory @relation(fields: [categoryId], references: [id])
  Claim Claim[]

  @@map("foundItems")
}

model LostItem {
  id          String    @id @default(uuid())
  userId      String
  // categoryId    String
  category    String
  founded      Boolean   @default(false)
  name        String
  description String
  DateAndlocation String?
  phone       String?
  image       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  // category ItemCategory @relation(fields: [categoryId], references: [id])

  @@map("lostItems")
}

model Claim {
  id                     String      @id @default(uuid())
  userId                 String
  foundItemId            String
  status                 claimStatus @default(PENDING)
  distinguishingFeatures String
  lostDate               DateTime
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  foundItem FoundItem @relation(fields: [foundItemId], references: [id])

  @@map("claims")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("profiles")
}

// ENUM
enum claimStatus {
  PENDING
  APPROVED
  REJECTED
}

enum userRole {
  USER
  ADMIN
}
